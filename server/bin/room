#!/usr/bin/env node

var app = require('express').createServer(),
clientSessions = require('client-sessions'),
config = require('../etc/config'),
express = require('express'),
https = require('https'),
nunjucks = require('nunjucks'),
path = require('path'),
qs = require('querystring');

var views = path.join(__dirname, '../views');
env = new nunjucks.Environment(new nunjucks.FileSystemLoader(views));
env.express(app);

app.use(express.bodyParser());
app.use(express.methodOverride());
app.use(express.logger());

app.use(clientSessions({
  cookieName: config.cookie_name,
  secret:     config.secret,
  duration:   config.duration
}));

app.get('/', function (req, res) {
    // currrentUser must be formatted for direct output in JS
    // so null or "alice@example.com"
    var cu = req.session.email ? '"' + req.session.email + '"' : "null";
    console.log(cu);
    var ctx = {
        currentUser: cu
    };
    console.log(req.session);
    res.render('home.html', ctx);

});

// Persona Authentication
app.post('/auth/login', function (req, res) {
    var suc = function (email) {
        req.session.email = email;
        res.send(email);
    };
    var sent = false;
    var fail = function () {
        if (! sent) res.send('FAIL', 401);
        sent = true;
    };
    var postBody = qs.stringify({
        assertion: req.body.assertion,
        audience: 'http://192.168.186.138:9714'
    });
    var opts = {
        host: 'verifier.login.persona.org',
        port: 443,
        path: '/verify',
        method: 'POST',
        headers: {
            'Content-Length': postBody.length,
            'Content-Type': 'application/x-www-form-urlencoded'
        }
    };
    var d = '';
    var verifier = https.request(opts, function (res){
        if (200 === res.statusCode) {
            res.setEncoding('utf8');
            res.on('data', function(data) {
                d += data;
              });
            res.on('end', function (a, b, c) {
                var verified = JSON.parse(d);
                if ("okay" === verified.status &&
                    !! verified.email) {
                    suc(verified.email);
                } else {
                    fail();
                }
            });
        } else {
            console.log('STATUS: ' + res.statusCode);
            console.log('HEADERS: ' + JSON.stringify(res.headers));
            fail();
        }
    });
    verifier.write(postBody);
    verifier.on('error', function (e) {
        console.error(e);
        fail();
    });
    verifier.end();
});

app.post('/auth/logout', function (req, res) {
  console.log('Logging user out');
  req.session.reset();
  res.send('OK');
});

app.use(express.static(path.join(__dirname, '../../client')));

app.listen(9714);